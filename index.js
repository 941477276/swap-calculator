!function(I){var g={};function n(l){if(g[l])return g[l].exports;var t=g[l]={i:l,l:!1,exports:{}};return I[l].call(t.exports,t,t.exports,n),t.l=!0,t.exports}n.m=I,n.c=g,n.d=function(I,g,l){n.o(I,g)||Object.defineProperty(I,g,{enumerable:!0,get:l})},n.r=function(I){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(I,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(I,"__esModule",{value:!0})},n.t=function(I,g){if(1&g&&(I=n(I)),8&g)return I;if(4&g&&"object"==typeof I&&I&&I.__esModule)return I;var l=Object.create(null);if(n.r(l),Object.defineProperty(l,"default",{enumerable:!0,value:I}),2&g&&"string"!=typeof I)for(var t in I)n.d(l,t,function(g){return I[g]}.bind(null,t));return l},n.n=function(I){var g=I&&I.__esModule?function(){return I.default}:function(){return I};return n.d(g,"a",g),g},n.o=function(I,g){return Object.prototype.hasOwnProperty.call(I,g)},n.p="",n(n.s=1)}([function(module,exports,__webpack_require__){eval("// extracted by mini-css-extract-plugin\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9jc3MvaW5kZXguc2Nzcz8wODQ1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpbiJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///0\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: ./src/css/index.scss\nvar css = __webpack_require__(0);\n\n// CONCATENATED MODULE: ./src/js/util.js\nclass Precision {\n  // 乘法\n  times(num1, num2, ...others) {\n    if (others.length > 0) {\n      return this.times(this.times(num1, num2), ...others)\n    }\n    num1 = num1 || 0\n    num2 = num2 || 0\n    const num1Changed = this.float2Fixed(num1)\n    const num2Changed = this.float2Fixed(num2)\n    // 把两个数的小数位数相加\n    const baseNum = this.digitLength(num1) + this.digitLength(num2)\n    const leftValue = num1Changed * num2Changed\n    // this.checkBoundary(leftValue)\n    return leftValue / Math.pow(10, baseNum)\n  }\n// 精确加法\n  plus(num1, num2, ...others) {\n    if (others.length > 0) {\n      return this.plus(this.plus(num1, num2), ...others)\n    }\n    const baseNum = Math.pow(10, Math.max(this.digitLength(num1), this.digitLength(num2)))\n    return (this.times(num1, baseNum) + this.times(num2, baseNum)) / baseNum\n  }\n// 精确减法\n  minus(num1, num2, ...others) {\n    if (others.length > 0) {\n      return this.minus(this.minus(num1, num2), ...others)\n    }\n    const baseNum = Math.pow(10, Math.max(this.digitLength(num1), this.digitLength(num2)))\n    return (this.times(num1, baseNum) - this.times(num2, baseNum)) / baseNum\n  }\n// 精确除法\n  divide(num1, num2, ...others) {\n    if (others.length > 0) {\n      return this.divide(this.divide(num1, num2), ...others)\n    }\n    const num1Change = this.float2Fixed(num1)\n    const num2Change = this.float2Fixed(num2)\n    return this.times(num1Change / num2Change, Math.pow(10, this.digitLength(num2) - this.digitLength(num1)))\n  }\n  // 精确除法2\n  divide2(arg1, arg2) {\n    let t1 = 0\n    let t2 = 0\n    let r1, r2\n    try {\n      t1 = arg1.toString().split(\'.\')[1].length\n    } catch (e) {}\n    try {\n      t2 = arg2.toString().split(\'.\')[1].length\n    } catch (e) {}\n    r1 = Number(arg1.toString().replace(\'.\', \'\'))\n    r2 = Number(arg2.toString().replace(\'.\', \'\'))\n    return (r1 / r2) * Math.pow(10, t2 - t1)\n  }\n// 四舍五入，且保留小数\n  round(num, ratio) {\n    const base = Math.pow(10, ratio)\n    return this.divide(Math.round(this.times(num, base)), base)\n  }\n// 把小数转成整数，支持科学计数法。如果是小数则放大成整数\n  float2Fixed(num) {\n    if (!~num.toString().indexOf(\'e\')) {\n      return Number(num.toString().replace(\'.\', \'\'))\n    }\n    const dlen = this.digitLength(num)\n    return dlen > 0 ? num * Math.pow(10, dlen) : num\n  }\n// 获取当前数小数位的长度(处理科学计数法，本质上处理e-n的情况)\n  digitLength(num) {\n    const eSplit = num.toString().split(/[eE]/)\n    const len = (eSplit[0].split(\'.\')[1] || \'\').length - (+eSplit[1] || 0)\n    return len > 0 ? len : 0\n  }\n//  检测数字是否越界，如果越界给出提示\n  checkBoundary(num) {\n    if (num > Number.MAX_SAFE_INTEGER || num < Number.MIN_SAFE_INTEGER) {\n      console.log(`${num} is beyond boundary when transfer to integer, the results may not be accurate`)\n    }\n  }\n}\n\nconst Utils = {\n  precision: new Precision(),\n  // 获取小数位数\n  retainDecimals(value, obj = {}) {\n    if (!value) return 0\n    value = value.toString()\n    if (~value.indexOf(\'e\')) {\n      return 0\n    }\n    let decimals = \'\'\n    if (value.indexOf(\'.\') > 0 && obj.decimal !== 0) {\n      let decimalsRe = new RegExp(\'[.]{1}[0-9]{0,\' + (obj.decimal || 8) + \'}\')\n      let decimalsExec = decimalsRe.exec(value)\n      decimalsExec && (decimals = decimalsExec[0])\n    }\n    let v = 0\n    let re = new RegExp(\'^-?[0-9]{1}[0-9]{0,\' + (obj.integer - 1 || 8) + \'}\')\n    v = re.exec(value)\n    let n = \'\'\n    if (v) {\n      n = v[0]\n    }\n    return n + decimals\n  },\n\n  // 获取小数位数\n  retainDecimalsWithSymbol(value, obj = {}) {\n    if (!value) return 0\n    value = value.toString()\n    if (~value.indexOf(\'e\')) {\n      return 0\n    }\n    let decimals = \'\'\n    if (value.indexOf(\'.\') > 0 && obj.decimal !== 0) {\n      let decimalsRe = new RegExp(\'[.]{1}[0-9]{0,\' + (obj.decimal || 8) + \'}\')\n      let decimalsExec = decimalsRe.exec(value)\n      decimalsExec && (decimals = decimalsExec[0])\n    }\n    let v = 0\n    let re = new RegExp(\'^-?[0-9]{1}[0-9]{0,\' + (obj.integer - 1 || 8) + \'}\')\n    v = re.exec(value)\n    let n = \'\'\n    if (v) {\n      n = v[0]\n    }\n    let result = n + decimals\n    if (Number(result) < 0) {\n      return n + decimals\n    } else {\n      return \'+\' + n + decimals\n    }\n  },\n  // 数字加逗号\n  numberFormat(num) {\n    if (num) {\n      let [num1, num2] = num.toString().split(\'.\')\n      num1 = num1.split(\'\').reverse().map((item, index) => {\n        return (index) % 3 || !index || item === \'-\' || item === \'+\' ? item : item + \',\'\n      }).reverse().join(\'\')\n      num2 ? num = num1 + \'.\' + num2 : num = num1\n    }\n    return num\n  },\n  // 补充0\n  splitFormat(num, fractionDigits, len) {\n    if (isNaN(num)) return num\n    if (num) {\n      if (num === \'0\') {\n        return num\n      }\n      let digit = num.toString().split(\'.\')\n      if (fractionDigits === 0) {\n        return digit[0]\n      }\n      if (digit.length > 1) {\n        if (fractionDigits === 0) {\n          return digit[0]\n        } else if (digit[1].length < fractionDigits) {\n          let digitResult = \'\'\n          for (let i = 0; i < fractionDigits - digit[1].length; i++) {\n            digitResult += \'0\'\n          }\n          return num + digitResult\n        } else {\n          let digitResult = digit[1].substring(0, len || fractionDigits)\n          return digit[0] + \'.\' + digitResult\n        }\n      } else {\n        let digitResult = \'.\'\n        for (let i = 0; i < fractionDigits; i++) {\n          digitResult += \'0\'\n        }\n        return num + digitResult\n      }\n    } else {\n      return num\n    }\n  },\n  // 位数不够补0\n  addZero(num, len) {\n    if (isNaN(num)) return 0\n    let str = String(num)\n    // console.log(num, len)\n    return String(str).replace(new RegExp(`^(\\\\-?)(\\\\d+)(\\\\.\\\\d{1,${len}})?`), (n, a, b, c) => {\n      // console.log(a, b, c)\n      let str = a + b // .replace(/(\\d)(?=(?:\\d{3})+$)/g, \'$1,\')\n      if (!len) {\n        return str\n      }\n      if (c) {\n        str += c + repeat(\'0\', len - c.length)\n      } else {\n        str += \'.\' + repeat(\'0\', len)\n      }\n      return str\n    })\n  },\n  // 数字加逗号\n  addCommom(num, len) {\n    if (isNaN(num) || !num) return num\n    num = String(num)\n    if (!isNaN(len)) {\n      if (len === 0) {\n        num = num.split(\'.\')[0]\n      }\n      return num.replace(/(\\d+)(\\.\\d+)?/, (a, b, c) => {\n        // console.log(b, c)\n        return b.replace(/(\\d)(?=(?:\\d{3})+$)/g, \'$1,\') + (c ? c.slice(0, len + 1) : \'\')\n      })\n    } else {\n      return num.replace(/^\\d+/, (a) => { return a.replace(/(\\d)(?=(?:\\d{3})+$)/g, \'$1,\') })\n    }\n  },\n  // 获取时间年月日 时分秒\n  timeFormat(time, type) {\n    let date = getTimeZone(time)\n    if (!type) return getYMD(date) + \' \' + getHMS(date)\n    switch (type) {\n      case \'HMS\': return getHMS(date)\n      case \'YMD\': return getYMD(date)\n    }\n  },\n  cssProperty(attr) {\n    var prefix = [ \'O\', \'ms\', \'Moz\', \'Webkit\' ]\n    var len = prefix.length\n    var style = document.createElement(\'i\').style\n    if (attr in style) {\n      return true\n    }\n    attr = attr.replace(/^[a-z]/, function (val) {\n      return val.toUpperCase()\n    })\n    while (len--) {\n      if (prefix[ len ] + attr in style) {\n        return true\n      }\n    }\n    return false\n  },\n  /**\n * 防反跳。func函数在最后一次调用时刻的wait毫秒之后执行！\n * @param func 执行函数\n * @param wait 时间间隔\n * @param immediate 为true, debounce会在wait时间间隔的开始调用这个函数\n * @returns {Function}\n */\n  debounce(func, wait, immediate) {\n    var timeout, args, context, timestamp, result\n    var later = function () {\n      var last = new Date().getTime() - timestamp // timestamp会实时更新\n      if (last < wait && last >= 0) {\n        timeout = setTimeout(later, wait - last)\n      } else {\n        timeout = null\n        if (!immediate) {\n          result = func.apply(context, args)\n          if (!timeout) context = args = null\n        }\n      }\n    }\n    return function () {\n      context = this\n      args = arguments\n      timestamp = new Date().getTime()\n      var callNow = immediate && !timeout\n      if (!timeout) {\n        timeout = setTimeout(later, wait)\n      }\n      if (callNow) {\n        result = func.apply(context, args)\n        context = args = null\n      }\n      return result\n    }\n  }\n}\n  // 字符串复制\nfunction repeat(target, n) {\n  var s = \'\'\n  while (n > 0) {\n    if (n % 2 === 1) {\n      s += target\n    }\n    if (n === 1) { break }\n    target += target\n    n = n >> 1\n  }\n  return s\n}\nfunction singleFormat(str) {\n  return str.toString().length === 1 ? (\'0\' + str) : str\n}\n\nfunction getYMD(time) {\n  let year = time.getFullYear()\n  let month = time.getMonth() + 1\n  let date = time.getDate()\n  return year + \'-\' + singleFormat(month) + \'-\' + singleFormat(date)\n}\n\nfunction getHMS(time) {\n  let hours = time.getHours()\n  let minutes = time.getMinutes()\n  let seconds = time.getSeconds()\n  return singleFormat(hours) + \':\' + singleFormat(minutes) + \':\' + singleFormat(seconds)\n}\nfunction getTimeZone(time) {\n  let GTM_8 = 480  // -480\n  let date = new Date(time)\n  let subMin = date.getTimezoneOffset() + GTM_8\n  date.setMinutes(date.getMinutes() + subMin)\n  return date\n}\n\n/* harmony default export */ var util = (Utils);\n\n// CONCATENATED MODULE: ./src/js/formula/common.js\n  // IsReverse 是否是反向合约\n  function IsReverse(QuoteCoin, PriceCoin) {\n    return QuoteCoin === PriceCoin\n  }\n  // MarginCoin 保证金币\n  function MarginCoin(BaseCoin, QuoteCoin, PriceCoin) {\n    return IsReverse(QuoteCoin, PriceCoin) ? BaseCoin : QuoteCoin\n  }\n  \n\n// CONCATENATED MODULE: ./src/js/formula/value.js\n  \n  \n  // CalculateContractValue 通过量和价格计算合约价值\n  // vol:量\n  // price:价格\n  // contract:合约信息\n  function CalculateContractValue(vol, price, Contract) {\n    return calculateContractValue(vol, price, Contract.contractSize, IsReverse(Contract.quoteCoin, Contract.priceCoin))\n  }\n  function calculateContractValue(vol, price, contractSize, isReverse) {\n    let amount = 0\n    if (vol <= 0 || price === 0 || contractSize <= 0) {\n      return 0\n    }\n    if (isReverse) {\n      amount = util.precision.divide(util.precision.times(vol, contractSize), price)\n    } else {\n      amount = util.precision.times(vol, contractSize, price)\n    }\n    return amount\n  }\n  // CalculateQuotePrice 通过价值和量计算价格\n  // value:价值\n  // vol:量\n  // contract:合约\n  function CalculateQuotePrice(value, vol, contract) {\n    if (!contract) {\n      return 0\n    }\n    return calculateQuotePrice(value, vol, contract.contractSize, IsReverse(contract.quoteCoin, contract.priceCoin))\n  }\n  function calculateQuotePrice(value, vol, contractSize, isReverse) {\n    let price\n    if (contractSize <= 0) {\n      return 0\n    }\n    if (isReverse) {\n      if (value <= 0) {\n        return 0\n      }\n      price = vol * contractSize / value\n      return price\n    }\n    if (vol <= 0) {\n      return 0\n    }\n    price = value / vol / contractSize\n    return price\n  }\n  // CalculateContractBasicValue 通过量和价格计算合约的基础比价值\n  // coinUnit true  返回值单位为张  false 单位和BaseCoin单位一致\n  function CalculateContractBasicValue(vol, price, contract, coinUnit) {\n    // console.log(66)\n    let amount = 0\n    if (vol <= 0 || price <= 0 || !contract) {\n      return amount\n    }\n    amount = vol\n    if (IsReverse(contract.quoteCoin, contract.priceCoin)) {\n      amount = coinUnit ? Math.floor(amount * price / contract.contractSize) : amount / price * contract.contractSize\n      return amount\n    }\n    return coinUnit ? Math.floor(amount / contract.contractSize) : util.precision.times(amount, contract.contractSize)\n  }\n\n    // CalculateContractBasicValue 通过量和价格计算合约的基础比价值\n  // 把张换成mrginCoin\n  function CalculateContractBasicValueTwo(vol, price, contract) {\n    let amount = 0\n    if (vol <= 0 || price <= 0 || !contract) {\n      return amount\n    }\n    amount = vol\n    if (IsReverse(contract.quoteCoin, contract.priceCoin)) {\n      return amount / price * contract.contractSize\n    }\n    return amount * contract.contractSize * price\n  }\n\n  \n\n// CONCATENATED MODULE: ./src/js/formula/margin.js\n  \n  // CalculateMMR 计算维持保证金率\n  function CalculateMMR(value, riskLimit) {\n    if (value <= riskLimit.BaseLimit || riskLimit.Step <= 0) {\n      return riskLimit.MaintenanceMargin\n    }\n    let stepValue = value - riskLimit.BaseLimit\n    let stepsCount = Math.ceil(stepValue / riskLimit.Step)\n    let MMR = riskLimit.MaintenanceMargin * (stepsCount + 1)\n    // 大于0.5\n    if (MMR > 0.5) {\n      return 0.5\n    }\n    return MMR\n  }\n  // CalculateMM 计算维持保证金\n  function CalculateMM(value, riskLimit) {\n    let MMR\n    if (value <= 0) {\n      return 0\n    }\n    MMR = CalculateMMR(value, riskLimit)\n    return value * MMR\n  }\n  // CalculateIMR 计算开仓保证金率\n  function CalculateIMR(value, riskLimit) {\n    if (value < riskLimit.BaseLimit || riskLimit.Step <= 0) {\n      return riskLimit.InitialMargin\n    }\n    let IMR = (Math.ceil((value - riskLimit.BaseLimit) / riskLimit.Step) + 1) * riskLimit.InitialMargin\n    return IMR > 1 ? 1 : IMR\n  }\n  // CalculateMarketOrderIMR 通过用户资产计算用户将资产全部开市价单时的开仓保证金率\n  // asset:用户资产\n  // advance:用户的已提交委托订单价值\n  // position:用户仓位\n  // contractInfo:合约信息\n  function CalculateMarketOrderIMR(asset, advance, position, contractInfo, way) {\n    let advanceValue = 0\n    let holdValue = 0\n    let preValue = 0\n    let IMR, IMR2\n    let takeFeeRatio = contractInfo.FeeConfig.TakerFee\n    if (advance && advance.Vol) {\n      advanceValue = CalculateContractValue(advance.Vol, advance.Amount / advance.Vol, contractInfo.Contract)\n    }\n    if (position) {\n      holdValue = CalculateContractValue(position.HoldVol, position.HoldAvgPrice, contractInfo.Contract)\n    }\n    preValue = advanceValue + holdValue\n    let i = 0\n    while (++i) {\n      IMR = contractInfo.RiskLimit.InitialMargin * i\n      IMR2 = CalculateIMR(asset / (IMR + 2 * takeFeeRatio + (way ? 0 : takeFeeRatio * IMR)) + preValue, contractInfo.RiskLimit)\n      if (IMR >= IMR2) {\n        return IMR\n      }\n    }\n  }\n  \n\n// CONCATENATED MODULE: ./src/js/formula/open.js\n  \n  \n  // CalculateAdvanceOpenCost 提交开仓订单时,计算预开仓成本\n  // order:订单信息\n  // position:用户持有仓位\n  // openOrderSize:已提交的委托订单大小\n  // contractInfo:合约信息\n  // way 是否开多 traue : false\n  function CalculateAdvanceOpenCost(order, position, openOrderSize, Contract, RiskLimit, way) {\n    if (order.Vol <= 0 || order.Price <= 0) {\n      return 0\n    }\n    let holdVol = 0\n    let holdAvgPrice = 0\n    let advanceVol = 0\n    let advancePrice = 0\n    if (position) {\n      holdVol = position.HoldVol\n      holdAvgPrice = position.HoldAvgPrice\n    }\n    if (openOrderSize && openOrderSize.Vol > 0) {\n      advanceVol = openOrderSize.Vol\n      advancePrice = openOrderSize.Amount / openOrderSize.Vol\n    }\n    return _calculateAdvanceOpenCost(holdVol, advanceVol, holdAvgPrice, advancePrice, order, Contract, RiskLimit, way)\n  }\n  function _calculateAdvanceOpenCost(holdVol, advanceVol, holdAvgPrice, advancePrice, order, Contract, RiskLimit, way) {\n    let orderValue = CalculateContractValue(order.Vol, order.Price, Contract)\n    let advanceValue = CalculateContractValue(advanceVol, advancePrice, Contract)\n    let holdValue = CalculateContractValue(holdVol, holdAvgPrice, Contract)\n    let totalValue = orderValue + advanceValue + holdValue\n    // 开仓保证金率\n    order.IMR = CalculateIMR(totalValue, RiskLimit)\n    if (order.Leverage > 0) {\n      let leverageIMR = 1 / order.Leverage\n      if (leverageIMR > order.IMR) {\n        order.IMR = leverageIMR\n      }\n    }\n    let IM = orderValue * order.IMR\n    let brankruptTakeFee = orderValue * BTR(way, order.TakeFeeRatio, order.IMR)\n    let MaxTakeFee = orderValue * order.TakeFeeRatio + brankruptTakeFee\n    let FreezAssets = IM + MaxTakeFee\n    return FreezAssets\n  }\n  // 是否开多单\n  // BTR 获取订单破产时的takeFeeRatio\n  function BTR(way, TakeFeeRatio, IMR) {\n    return way ? TakeFeeRatio : (TakeFeeRatio * (1 + IMR))\n  }\n  /* harmony default export */ var formula_open = (CalculateAdvanceOpenCost);\n\n// CONCATENATED MODULE: ./src/js/formula/volume.js\n\n\n\n// -----------------------------------------------------------计算市价可开多少张 ------------------\n// CalculateVolume 通过资产和价格,计算量\n// asset:资产\n// advance:用户的已提交委托订单价值\n// position:用户仓位\n// price:价格\n// way:开仓类型,是开多,还是开空\n// contractInfo:合约信息\n// leverage 杠杆\nfunction CalculateVolume(asset, advance, position, price, contractInfo, way, leverage) {\n  if (asset <= 0) {\n    return 0\n  }\n  let IMR, takeFeeRatio, bankruptTakeFeeRatio, M, IMRT\n  IMRT = CalculateMarketOrderIMR(asset, advance, position, contractInfo, way)\n  IMR = Math.max(IMRT, 1 / leverage)\n\n  takeFeeRatio = contractInfo.FeeConfig.TakerFee\n  bankruptTakeFeeRatio = takeFeeRatio\n  if (!way) { // 开空\n    bankruptTakeFeeRatio = takeFeeRatio * (1 + IMR)\n  }\n  // 空仓 bankruptTakeFeeRatio = BTR =  (1+IMR)*TR\n  // 多仓 bankruptTakeFeeRatio = TR\n  // A = vol * p * s * [IMR + TR + BTR]\n  let isR = IsReverse(contractInfo.Contract.quoteCoin, contractInfo.Contract.priceCoin) // asset = vol * price*s*(IMR+2*takeFeeRatio)\n      // asset = vol*s*(IMR+2*takeFeeRatio)/price\n    // D = asset * price\n    // M = s*(IMR+2*takeFeeRatio)\n  M = contractInfo.Contract.contractSize * (IMR + takeFeeRatio + bankruptTakeFeeRatio)\n  if (M <= 0) {\n    return 0\n  }\n  price = isR ? price : 1 / price\n  let max = Math.floor(asset * price / M)\n  if (IMR > contractInfo.RiskLimit.InitialMargin) {\n    let advanceValue = 0\n    let holdValue = 0\n    if (advance && advance.Vol) {\n      advanceValue = CalculateContractValue(advance.Vol, advance.Amount / advance.Vol, contractInfo.Contract)\n    }\n    if (position) {\n      holdValue = CalculateContractValue(position.HoldVol, position.HoldAvgPrice, contractInfo.Contract)\n    }\n    let up = Math.floor(price * ((IMRT / contractInfo.RiskLimit.InitialMargin - 2) * contractInfo.RiskLimit.Step + contractInfo.RiskLimit.BaseLimit - advanceValue - holdValue) / contractInfo.Contract.contractSize)\n    max = IMRT <= 1 / leverage ? max : Math.max(max, up)\n  }\n  return max\n}\n\n\n// CONCATENATED MODULE: ./src/js/formula/close.js\n\n// CalculateCloseLongProfitAmount 计算多仓位的未实现盈亏\n// vol:持仓量\n// openPrice:持仓均价\n// closePrice:当前标记价\n// contractSize:合约大小\n// isReverse:是否是反向合约\nfunction CalculateCloseLongProfitAmount(vol, openPrice, closePrice, contract) {\n  if (vol <= 0 || contract.contractSize <= 0 || openPrice <= 0 || closePrice <= 0) {\n    return 0\n  }\n  // let openValue, closeValue\n  if (IsReverse(contract.quoteCoin, contract.priceCoin)) {\n    // openValue = vol * contract.contractSize / openPrice\n    // closeValue = vol * contract.contractSize / closePrice\n    return vol * contract.contractSize * (1 / openPrice - 1 / closePrice) // openValue - closeValue\n  }\n  // openValue = vol * contract.contractSize * openPrice\n  // closeValue = vol * contract.contractSize * closePrice\n  return vol * contract.contractSize * (closePrice - openPrice) // closeValue - openValue\n}\n// CalculateCloseShortProfitAmount 计算空仓位的未实现盈亏\n// vol:持仓量\n// openPrice:持仓均价\n// closePrice:当前标记价\n// contractSize:合约大小\n// isReverse:是否是是方向合约\n// let openValue, closeValue\nfunction CalculateCloseShortProfitAmount(vol, openPrice, closePrice, contract) {\n  if (vol <= 0 || contract.contractSize <= 0 || openPrice <= 0 || closePrice <= 0) {\n    return 0\n  }\n  if (IsReverse(contract.quoteCoin, contract.priceCoin)) {\n    // openValue = vol * contract.contractSize / openPrice\n    // closeValue = vol * contract.contractSize / closePrice\n    return vol * contract.contractSize * (1 / closePrice - 1 / openPrice) // closeValue - openValue\n  }\n  // openValue = vol * contract.contractSize * openPrice\n  // closeValue = vol * contract.contractSize * closePrice\n  return vol * contract.contractSize * (openPrice - closePrice) // openValue - closeValue\n}\nfunction LongOrSort(vol, openPrice, closePrice, contract, way) {\n  return way ? CalculateCloseLongProfitAmount(vol, openPrice, closePrice, contract) : CalculateCloseShortProfitAmount(vol, openPrice, closePrice, contract)\n}\n/* harmony default export */ var formula_close = (LongOrSort);\n\n// CONCATENATED MODULE: ./src/js/formula/contractObj.js\n/* harmony default export */ var contractObj = ({\n  // 获取合约信息\n  getContract(productInfo) {\n    return {contractSize: Number(productInfo.face_value), quoteCoin: productInfo.quote_coin, priceCoin: productInfo.is_reverse ? productInfo.quote_coin : productInfo.base_coin}\n  },\n  // 获取合约系数\n  getRiskLimit(risk_limit) {\n    return {BaseLimit: Number(risk_limit.risk_limit_base), Step: Number(risk_limit.risk_limit_step), InitialMargin: Number(risk_limit.imr), MaintenanceMargin: Number(risk_limit.mmr)}\n  }\n});\n\n// CONCATENATED MODULE: ./src/js/formula/bankrupt.js\n// 破产相关公式\n\n\n// CalculateBankruptcyPrice 计算破产价\n// position:用户的仓位\n// assets:用户的资产,如果仓位的全仓模式,需要传入用户资产,如果是逐仓模式,不需要传入用户资产\nfunction CalculateBankruptcyPrice(position, assets, contractInfo, way) {\n  let HV, HP, PV, IM, resValue, S, T, M, D, BP\n  HV = position.HoldVol\n  HP = position.HoldAvgPrice\n  PV = CalculateContractValue(HV, HP, contractInfo.Contract)\n  // 当前仓位需要的维持保证金\n  IM = position.IM\n  if (assets) {\n    IM = IM + assets\n  }\n  // ToDo 保证金不够怎么办\n  // if (IM < 0) {\n  //   return -1\n  // }\n  S = contractInfo.Contract.contractSize\n  T = contractInfo.FeeConfig.TakerFee\n  // HV: hold volume\n  // BP: 破产价\n  // S: 合约价格\n  // T: TakeFeeRatio\n  // TF: TakeFee\n  // HV*BP*S*T = TF\n  // 多仓\n  // PV-IM = resValue\n  // (resValue-TF)/(HV*S) = BP\n  // resValue/(HV*S+HV*S*T) = BP\n  // 空仓\n  // PV+IM = resValue\n  // (PV+IM-TF)/(HV*S) = BP\n  // resValue/(HV*S+HV*S*T) = BP\n  // 破产时用户持仓的价值\n  // 开多仓,破产时的仓位价值 = 现在的仓位价值 - 开仓保证金\n  // 开空仓,破产时的仓位价值 = 现在的仓位价值 + 开仓保证金\n  let isR = IsReverse(contractInfo.Contract.quoteCoin, contractInfo.Contract.priceCoin)\n  if (isR) {\n    way = !way\n  }\n  if (way) {\n    resValue = PV - IM\n    // 如果保证金大于仓位的资产,肯定没有达到强平位置\n    if (resValue <= 0) {\n      return 0\n    }\n    D = HV * S * (1 - T)\n  } else {\n    resValue = PV + IM\n    D = HV * S * (1 + T)\n  }\n  M = resValue\n  if (D <= 0) {\n    return -1\n  }\n  BP = M / D\n  if (isR) {\n    if (BP <= 0) {\n      return -1\n    }\n    BP = 1 / BP\n  }\n  return BP\n}\n/* harmony default export */ var bankrupt = (CalculateBankruptcyPrice);\n\n// CONCATENATED MODULE: ./src/js/formula/adl.js\n\n\n\n// CalculatePnl 计算仓位盈利排名系数\n// 排序 = 盈利百分比 * 有效杠杆  (如果盈利)\n//         = 盈利百分比 / 有效杠杆  (如果亏损)\n// 其中\n//   有效杠杆 = abs((标记价值) / (标记价值 - 破产价值))\n//   盈利百分比 = (标记价值 - 平均开仓价值) / abs(平均开仓价值)\n//   标记价值 = 位于标记价格时的仓位价值\n//   破产价值 = 位于破产价格时的仓位价值\n//   平均开仓价值 = 位于平均开仓价格时的仓位价值\n\nfunction CalculatePNL(position, assets, fairPrice, contractInfo, way) {\n  // 盈利百分比 = (标记价值 - 平均开仓价值) / abs(平均开仓价值)\n  // 盈利百分比= [FP*Vol*S - HP*Vol*S]/HP*Vol*S\n  // 有效杠杆 = abs[(标记价值) / (标记价值 - 破产价值)]\n  // 有效杠杠 = abs[FP*Vol*S/(FP*Vol*S - BP*Vol*S)]\n  // 排序 = [(FP*Vol*S - HP*Vol*S)/HP*Vol*S]*abs[FP*Vol*S/(FP*Vol*S - BP*Vol*S)]\n  // Pnl = [(FP - HP)/HP]*abs[FP/(FP - BP)]\n  if (!position) {\n    return 0\n  }\n  let profit, positionValue, earningsRatio, BP, tmp, leverage\n  profit = formula_close(position.HoldVol, position.HoldAvgPrice, fairPrice, contractInfo.Contract, way)\n  positionValue = CalculateContractValue(position.HoldVol, position.HoldAvgPrice, contractInfo.Contract)\n  earningsRatio = profit / positionValue\n  BP = bankrupt(position, assets, contractInfo)\n  tmp = fairPrice - BP\n  if (tmp === 0) {\n    if (profit > 0) {\n      return 100000000\n    } else {\n      return 0\n    }\n  }\n  leverage = Math.abs(fairPrice / tmp)\n  if (leverage === 0) {\n    if (profit > 0) {\n      return 0\n    }\n    return -100000000\n  }\n  if (profit < 0) {\n    return earningsRatio / leverage\n  }\n  return earningsRatio * leverage\n}\n\nfunction CalculateQuantile(i, size) {\n  let f = Math.ceil(i * 5 / size)\n  f *= 0.2\n  return f * 100\n}\n\n\n\n// CONCATENATED MODULE: ./src/js/formula/liquidate.js\n  // -------------------------- 开仓验证 --------------------------------------\n  // 1.在最大和最小区间内\n  // 2.必须小于等于最大可开\n  // 3.判断价格是不是强平价\n  // IsLiquidate 根据价格和开仓方向判断是否会强平\n  // positionType:开仓方向\n  // positionLiquidatePrice:强平价\n  // fairPrice:当前合理价格\n  \n  \n  \n  function IsLiquidate(longOrSort, positionLiquidatePrice, fairPrice) {\n    if (positionLiquidatePrice < 0) {\n      return true\n    } else if (positionLiquidatePrice === 0) {\n      return false\n    }\n    if (longOrSort) {\n      if (fairPrice <= positionLiquidatePrice) {\n        return true\n      }\n    } else {\n      if (fairPrice >= positionLiquidatePrice) {\n        return true\n      }\n    }\n    return false\n  }\n  // CalculateOrderLiquidatePrice 计算订单的强平价\n  // order:订单\n  // assets:用户资产,如果是全仓模式,才需要输入用户资产,逐仓模式不需要\n  // contractInfo:合约信息\n  function CalculateOrderLiquidatePrice(order, asset, contractInfo, longOrSort) {\n    let value, restM, MM, IMR, leverageIMR, IM\n    value = CalculateContractValue(order.Vol, order.Price, contractInfo.Contract)\n    restM = 0\n    MM = CalculateMM(value, contractInfo.RiskLimit)\n    // 如果是全仓模式\n    // 全仓模式,不考虑用户输入的杠杆大小\n    if (order.OpenType) {\n      if (asset) {\n        restM = asset - MM // asset.AvailableVol\n      }\n    } else {\n      // 如果是逐仓模式\n      IMR = CalculateIMR(value, contractInfo.RiskLimit)\n      if (order.Leverage > 0) {\n        leverageIMR = 1 / order.Leverage\n        if (leverageIMR > IMR) {\n          IMR = leverageIMR\n        }\n      }\n      IM = value * IMR\n      restM = IM - MM\n    }\n    if (restM < 0) {\n      // 如果返回小于零,表示订单无效\n      return -1\n    }\n    let isR = IsReverse(contractInfo.Contract.quoteCoin, contractInfo.Contract.priceCoin)\n    if (isR) {\n      longOrSort = !longOrSort\n    }\n    // 如果开多\n    if (longOrSort) {\n      value = value - restM\n      // 用户资产的价值大于订单的价值\n      // 只要当合约价格清零时才会强平\n      if (value <= 0) {\n        // 返回零\n        return isR ? 100000000 : 0\n      }\n    } else {\n      value = value + restM\n    }\n    return CalculateQuotePrice(value, order.Vol, contractInfo.Contract)\n  }\n  // CalculatePositionLiquidatePrice 计算仓位的强平价\n  // position:仓位\n  // assets:用户资产,如果是全仓模式,才需要输入用户资产,逐仓模式不需要\n  // contractInfo:合约信息\n  function CalculatePositionLiquidatePrice(position, assets, contractInfo, longOrSort) {\n    let HV, HP, PV, resValue, IM, restM, T, D, M, LP\n    HV = position.HoldVol\n    HP = position.HoldAvgPrice\n    PV = CalculateContractValue(HV, HP, contractInfo.Contract)\n    // 当前仓位需要的维持保证金\n    IM = position.IM\n    if (assets) {\n      IM = IM + assets\n    }\n    restM = IM - position.MM\n    // ToDo 保证金不够怎么办\n    // if (restM < 0) {\n    //   return -1\n    // }\n    let S = contractInfo.Contract.contractSize\n    T = contractInfo.FeeConfig.TakerFee\n    // HV: hold volume\n    // LP: 强平价\n    // S: 合约价格\n    // T: TakeFeeRatio\n    // TF: TakeFee\n    // HV*LP*S*T = TF\n    // 多仓\n    // PV-(IM-MM) = resValue\n    // (resValue+TF)/(HV*S) = LP\n    // resValue/(HV*S-HV*S*T) = LP\n    // 空仓\n    // PV+(IM-MM) = resValue\n    // (PV+(IM-MM)-TF)/(HV*S) = LP\n    // resValue/(HV*S+HV*S*T) = LP\n    D = 0\n    let isR = IsReverse(contractInfo.Contract.quoteCoin, contractInfo.Contract.priceCoin)\n    if (isR) {\n      longOrSort = !longOrSort\n    }\n    // 判断是否是开多\n    if (longOrSort) {\n      resValue = PV - restM\n      // 如果保证金大于仓位的资产,肯定没有达到强平位置\n      if (resValue <= 0) {\n        return isR ? 100000000 : 0\n      }\n      D = HV * S * (1 - T)\n    } else {\n      resValue = PV + restM\n      D = HV * S * (1 + T)\n    }\n    M = resValue\n    if (D <= 0) {\n      return -1\n    }\n    LP = M / D\n    if (isR) {\n      LP = 1 / LP\n    }\n    if (LP > 100000000) {\n      LP = 100000000\n    }\n    return LP\n  }\n  \n\n// CONCATENATED MODULE: ./src/js/formula/index.js\n\n\n\n\n\n\n\n\n/* harmony default export */ var formula = ({ CalculateContractValue: CalculateContractValue, CalculateAdvanceOpenCost: formula_open, CalculateContractBasicValue: CalculateContractBasicValue, MarginCoin: MarginCoin, CalculateVolume: CalculateVolume, LongOrSort: formula_close, contractObj: contractObj, CalculatePNL: CalculatePNL, CalculateQuantile: CalculateQuantile, CalculateOrderLiquidatePrice: CalculateOrderLiquidatePrice, IsLiquidate: IsLiquidate, CalculatePositionLiquidatePrice: CalculatePositionLiquidatePrice, IsReverse: IsReverse, CalculateContractBasicValueTwo: CalculateContractBasicValueTwo, CalculateQuotePrice: CalculateQuotePrice });\n\n// CONCATENATED MODULE: ./src/index.js\n\r\n\r\n\r\n\r\n\r\nnew Vue({\r\n  el: \'#app\',\r\n  filters: {\r\n    addCommom: util.addCommom\r\n  },\r\n  data() {\r\n    return {\r\n      // 计算方案 1： 盈亏计算  2. 强平价格 3.目标价收益率\r\n      calculatorType: 1,\r\n      // 杠杆列表，数据需从数据库获取\r\n      leverageList: [\r\n        {"name": "allCabin", "value": 100},\r\n        {"name": "100x", "value": 100},\r\n        {"name": "50x", "value": 50},\r\n        {"name": "20x", "value": 20},\r\n        {"name": "10x", "value": 10}\r\n      ],\r\n      form: {\r\n        // 杠杆\r\n        leverageInfo: {\r\n          value: \'\'\r\n        },\r\n        // 计算类型，1：目标收益额，2：目标收益率\r\n        targetEarnings: 1,\r\n        calculatorType: 1, // 计算类型\r\n        options: 1, // 方向\r\n        positions: \'\', // 仓位\r\n        openPrice: \'\', // 开仓价格\r\n        closePrice: \'\', // 平仓价格\r\n        earnings: \'\', // 收益额或者收益率\r\n      },\r\n      // 盈亏计算\r\n      profitAndLoss: {\r\n        im: 0, // 占用保证金\r\n        value: 0, // 仓位价值\r\n        pl: 0, // 盈亏\r\n        rate: 0 // 收益率\r\n      },\r\n      // 强平价格\r\n      flatPrice: {\r\n        flatPrice: 0, // 强平价格\r\n        value: 0, // 仓位价值\r\n        im: 0, // 实际起始保证金率\r\n        mm: 0   // 实际维持保证金率\r\n      },\r\n      // 目标价收益率\r\n      targetClose: {\r\n        price: 0,\r\n        im: 0,\r\n        valueOrRote: 0\r\n      },\r\n      // 需从后台获取数据\r\n      productInfo: {\r\n        //"instrument_id": 1,\r\n        //"index_id": 1,\r\n        "symbol": "BTCUSDT",\r\n        //"name_zh": "BTCUSDT永续合约",\r\n        //"name_en": "BTCUSDT SWAP",\r\n        "base_coin": "BTC",\r\n        "quote_coin": "USDT",\r\n        //"margin_coin": "USDT",\r\n        "is_reverse": false,\r\n        "market_name": "*",\r\n        "face_value": "0.0001",\r\n        //"begin_at": "2019-10-29T00:00:00Z",\r\n        //"settle_at": "2020-03-01T16:00:00Z",\r\n        //"settlement_interval": 28800,\r\n        //"min_leverage": "1",\r\n        //"max_leverage": "100",\r\n        //"px_unit": "0.01",\r\n        //"qty_unit": "1",\r\n        //"value_unit": "0.0001",\r\n        //"min_qty": "1",\r\n        //"max_qty": "100000000",\r\n        //"position_type": 3,\r\n        //"underweight_type": 1,\r\n        //"status": 3,\r\n        //"area": 1,\r\n        //"created_at": "2019-11-19T10:41:38.059456Z",\r\n        //"depth_round": "1.01",\r\n        //"max_funding_rate": "0.00375",\r\n        //"min_funding_rate": "-0.00375",\r\n        "risk_limit_base": "1000000",\r\n        "risk_limit_step": "500000",\r\n        "mmr": "0.005",\r\n        "imr": "0.01",\r\n        //"maker_fee_ratio": "0.00025",\r\n        //"taker_fee_ratio": "0.00075",\r\n        //"settle_fee_ratio": "0",\r\n        //"plan_order_price_min_scope": "0.001",\r\n        //"plan_order_price_max_scope": "2",\r\n        //"plan_order_max_count": 10,\r\n        //"plan_order_min_life_cycle": 24,\r\n        //"plan_order_max_life_cycle": 168,\r\n        "price_coin": "BTC"\r\n      }\r\n    };\r\n  },\r\n  computed: {\r\n    // 公共数据，需从后台获取\r\n    common() {\r\n      let obj = {\r\n        "pxUnit": 2,\r\n        //"qtyUnit": 1,\r\n        "valueUnit": 4,\r\n        "marginUnit": "USDT",\r\n        //"haveAssert": 0,\r\n        //"positionLoss": 0,\r\n        //"showOpenAccount": false,\r\n        "PNL": 0,\r\n        //"liquidateAssertLong": 0,\r\n        //"liquidateAssertSort": 0,\r\n        //"imTotal": 0,\r\n        /*"leverageList": [\r\n          {"name": "allCabin", "value": 100},\r\n          {"name": "100x", "value": 100},\r\n          {"name": "50x","value": 50},\r\n          {"name": "20x", "value": 20},\r\n          {"name": "10x", "value": 10}\r\n        ],*/\r\n        //"isPlan": false,\r\n        //"limitType": 1\r\n      };\r\n      return obj;\r\n    },\r\n  },\r\n  methods: {\r\n    calculator() {\r\n      let form = this.form;\r\n      let profitAndLoss = this.profitAndLoss;\r\n      switch (this.calculatorType) {\r\n        case 1:\r\n          if (!form.positions || !form.openPrice || !form.closePrice) {\r\n            this.$notify.warning({\r\n              title: \'提示\',\r\n              message: \'缺少必要参数，请补充完整参数\'\r\n            });\r\n            return false;\r\n          }\r\n          // 仓位价值\r\n          this.profitAndLoss.value = this.CalculateContractValue(Number(form.positions), Number(form.openPrice));\r\n          let margin = this.marginRate(this.profitAndLoss.value);\r\n          // 占用保证金\r\n          this.profitAndLoss.im = profitAndLoss.value * Math.max(margin.initial, 1 / form.leverageInfo.value);\r\n          // 盈亏\r\n          this.profitAndLoss.pl = this.plFn(form.openPrice, form.closePrice, Number(form.positions), form.options === 1);\r\n          // 收益率\r\n          this.profitAndLoss.rate = profitAndLoss.pl / profitAndLoss.im * 100;\r\n          break;\r\n        case 2:\r\n          if (!form.positions || !form.openPrice) {\r\n            this.$notify.warning({\r\n              title: \'提示\',\r\n              message: \'缺少必要参数，请补充完整参数\'\r\n            });\r\n            return false;\r\n          }\r\n          this.flatPrice.value = this.CalculateContractValue(Number(form.positions), Number(form.openPrice));\r\n          let margin1 = this.marginRate(this.flatPrice.value);\r\n          this.flatPrice.im = Math.max(margin1.initial, 1 / form.leverageInfo.value);\r\n          this.flatPrice.mm = margin1.maintenance;\r\n          // let fee = Number(this.productInfo.taker_fee_ratio)\r\n          // let position = {HoldVol: Number(this.positions), HoldAvgPrice: Number(this.openPrice), IM: this.flatPrice.im, MM: this.flatPrice.mm}\r\n          // this.flatPrice.flatPrice = Formula.CalculatePositionLiquidatePrice(position, 0, this.getContractInfo(), !this.options)\r\n          // let pl = this.flatPrice.value * (margin.initial - margin.maintenance) * (this.options ? 1 + fee : 1 - fee)\r\n          this.flatPrice.flatPrice = this.liquidatePrice(Number(form.positions), Number(form.openPrice), form.leverageInfo.value);\r\n          break;\r\n        case 3:\r\n          if (!form.positions || !form.openPrice || !form.earnings) {\r\n            this.$notify.warning({\r\n              title: \'提示\',\r\n              message: \'缺少必要参数，请补充完整参数\'\r\n            });\r\n            return false;\r\n          }\r\n          let value = this.CalculateContractValue(Number(form.positions), Number(form.openPrice));\r\n          let margin2 = this.marginRate(value);\r\n          this.targetClose.im = value * Math.max(margin2.initial, 1 / form.leverageInfo.value);\r\n          let isR = formula.IsReverse(this.productInfo.quote_coin, this.productInfo.price_coin);\r\n          let optionsTrue = form.options === 1;\r\n          if (form.targetEarnings === 1) {\r\n            if ((optionsTrue && !isR) || (!optionsTrue && isR)) {\r\n              value += Number(form.earnings);\r\n            } else {\r\n              value -= Number(form.earnings);\r\n            }\r\n            this.targetClose.valueOrRote = form.earnings / this.targetClose.im;\r\n          } else {\r\n            this.targetClose.valueOrRote = form.earnings * this.targetClose.im / 100;\r\n            if ((optionsTrue && !isR) || (!optionsTrue && isR)) {\r\n              value += this.targetClose.valueOrRote;\r\n            } else {\r\n              value -= this.targetClose.valueOrRote;\r\n            }\r\n          }\r\n          this.targetClose.price = this.targetClosePriceFn(value, Number(form.positions));\r\n          break;\r\n      }\r\n    },\r\n    // 获取合约对象\r\n    getContractInfo() {\r\n      let  productInfo = this.productInfo;\r\n      return {\r\n        FeeConfig: {TakerFee: Number(productInfo.taker_fee_ratio)},\r\n        Contract: formula.contractObj.getContract(productInfo),\r\n        RiskLimit: formula.contractObj.getRiskLimit(productInfo)\r\n      };\r\n    },\r\n    // 算仓位价值\r\n    CalculateContractValue(vol, price) {\r\n      return formula.CalculateContractValue(vol, price, formula.contractObj.getContract(this.productInfo))\r\n    },\r\n    // 盈亏计算\r\n    plFn(open, close, positions, way) {\r\n      return formula.LongOrSort(positions, open, close, formula.contractObj.getContract(this.productInfo), way) || 0\r\n    },\r\n    // 计算目标平仓价格\r\n    targetClosePriceFn(value, vol) {\r\n      return formula.CalculateQuotePrice(value, vol, formula.contractObj.getContract(this.productInfo))\r\n    },\r\n    // 计算目标平仓价格\r\n    liquidatePrice(Vol, Price, Leverage) {\r\n      let optionsTrue = this.form.options === 1;\r\n      return formula.CalculateOrderLiquidatePrice({Vol, Price, Leverage}, 0, this.getContractInfo(), optionsTrue);\r\n    },\r\n    // 计算起始和维持保证金率\r\n    marginRate(totalValue) {\r\n      let risk = this.productInfo;\r\n      let initial = Number(risk.imr);\r\n      let maintenance = Number(risk.mmr);\r\n      if (totalValue > risk.risk_limit_base) {\r\n        let steps = Math.ceil((totalValue - risk.risk_limit_base) / risk.risk_limit_step);\r\n        initial = util.precision.times(steps + 1, initial);\r\n        maintenance = util.precision.times(steps + 1, maintenance);\r\n      }\r\n      if (initial > 1) {\r\n        initial = 1;\r\n      }\r\n      if (maintenance > 0.5) {\r\n        maintenance = 0.5;\r\n      }\r\n      return {initial, maintenance};\r\n    },\r\n  }\r\n});\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n')}]);